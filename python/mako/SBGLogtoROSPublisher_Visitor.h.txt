#ifndef SBGLOGPARSER2_VISITOR_H
#define SBGLOGPARSER2_VISITOR_H

// include des headers des messages ROS
% for sbglog_type in sbglogs_types:
#include "sbg_driver/${sbglog_type}.h"
% endfor

//
#include <boost/variant/static_visitor.hpp>


#define _DECL_OPERATOR_VISITOR(ros_msg_type) \\
    bool operator()(const ros_msg_type& ros_msg, SBGLogtoROSPublisher* _sbglog_publisher) const


class SBGLogtoROSPublisher;

class visitor_sbglog_to_ros : public boost::static_visitor<bool>
{
public:
% for sbglog_type in sbglogs_types:
    _DECL_OPERATOR_VISITOR(sbg_driver::${sbglog_type});
% endfor

private:
    // utilisation de la forme templatisée de l'operator de visitor
    // car l'opération (modulo le type instancé dans boost::variant) reste
    // la même (récupération d'un publisher et publication du message). Le seul
    // paramètre dynamique est le type du ROS message (type du message lié au
    // type du log récupéré via l'API SBG).
    template<typename T> bool _operator(const T& ros_msg_with_SBGData);
};

#endif // SBGLOGPARSER2_VISITOR_H
