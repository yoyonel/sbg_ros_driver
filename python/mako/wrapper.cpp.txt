#ifndef WRAPPER_SPECIALIZATION_H
#define WRAPPER_SPECIALIZATION_H

#include "ros/ros.h"

// include des headers des messages ROS
% for sbglog_type in sbglogs_types:
#include "sbg_driver/${sbglog_type}.h"
% endfor

//----------------------------------------------------------------------------------
// Association des enums log de sbg aux ros msg type par spécialisation de templates
//----------------------------------------------------------------------------------

template <SbgEComLog enum_log>
struct SBGLogEnum_Types {
};

% for sbglog in sbglogs:
    % for enum in sbglog.enum:
template <>
struct SBGLogEnum_Types<${enum}> {
    typedef ${sbglog.type} t_sbglog;
    typedef sbg_driver::${sbglog.type} t_rosmsg;
};

    % endfor
% endfor

std::map<SbgEComLog, ros::PublisherPtr> map_enum_rospub;


//----------------------------------------
template<typename TRosMsg>
std::string build_topic_name(
        const std::string& _prefix_pattern="SbgLog",
        const std::string& _suffix_pattern="Data",
        const std::string& _suffix_for_rostopic_name="")
{
    // url: http://stackoverflow.com/questions/1055452/c-get-name-of-type-in-template
    char const * name = typeid( TRosMsg ).name();
    //
    // url: http://www.boost.org/doc/libs/master/libs/core/doc/html/core/demangle.html
    const std::string& demangled_name = boost::core::demangle( name );
    //
    // url: http://www.cplusplus.com/reference/string/string/find/
    const std::size_t& found_prefix = demangled_name.find(_prefix_pattern);
    const std::size_t& found_suffix = demangled_name.find(_suffix_pattern);
    assert(found_prefix!=std::string::npos);
    assert(found_suffix!=std::string::npos);
    //
    // url: http://www.cplusplus.com/reference/string/string/substr/
    return demangled_name.substr(found_prefix, found_suffix - found_prefix) +
            _suffix_for_rostopic_name;
}

template<typename TSbgLog, typename TRosMsg>
TRosMsg build_rosmsg(const SbgBinaryLogData *pLogData)
{
    typedef const TSbgLog* TSbgLogPtr;
    typedef const TSbgLog& TSbgLogRef;

    // const cast à l'ancienne assurée par l'API C SBG
    // => on récupère les données (pointeur mémoire vers les données)
    TSbgLogRef pLogDataCasted = *(TSbgLogPtr)(pLogData);

    // on instancie un ros message associé au log
    TRosMsg ros_msg;

    // copie des données (à la mano, avec memcpy)
    std::memcpy(&ros_msg,
                &(pLogDataCasted),
                sizeof(TSbgLog));

    return ros_msg;
}

template<typename TRosMsg>
ros::Publisher get_rospub(const SbgEComLog& enum_log, ros::NodeHandle& n)
{
    // récupération du ROS Publisher associé au log
    ros::Publisher ros_pub;

    if(map_enum_rospub.count(enum_log)) {
        ros_pub = *map_enum_rospub.at(enum_log);
    }
    else {
        // le ROS Publisher n'est pas initialisé/utilisé
        // création et initialisation du ROS Publisher
        ros_pub = n.advertise<TRosMsg>(build_topic_name<TRosMsg>(), 10);

        // sauvegarde dans la map de la correspondance: enum log -> ros publisher
        map_enum_rospub[enum_log] = std::make_shared<ros::Publisher>(ros_pub);
    }

    return ros_pub;
}

template<SbgEComLog enum_log,
         typename TSbgLog=typename SBGLogEnum_Types<enum_log>::t_sbglog,
         typename TRosMsg=typename SBGLogEnum_Types<enum_log>::t_rosmsg>
void publish(const SbgBinaryLogData *pLogData, ros::NodeHandle& n)
{
    TRosMsg ros_msg = build_rosmsg<TSbgLog, TRosMsg>(pLogData);

    // récupération du ROS Publisher associé au log
    ros::Publisher ros_pub = get_rospub<TRosMsg>(enum_log, n);

    // Publication du message ROS
    ros_pub.publish(ros_msg);
}
//----------------------------------------
//----------------------------------------------------------------------------------

int main(int argc, char **argv)
{
    SbgLogStatusData status = {0, 1, 2, 3, 4, 5, 6};
    SbgLogEkfEulerData euler = {0, {1, 2, 3}, {4, 5, 6}, 7};

    ros::init(argc, argv, "sbg_ellipse");

    ros::NodeHandle n;

    ros::Rate loop_rate(1);
    while (ros::ok())
    {
        publish<SBG_ECOM_LOG_STATUS>((SbgBinaryLogData*)(&status), n);
        publish<SBG_ECOM_LOG_EKF_EULER>((SbgBinaryLogData*)(&euler), n);
    }

    return 0;
}

#endif